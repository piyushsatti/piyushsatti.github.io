---
import { getCollection } from "astro:content";
import BaseLayout from "../../layouts/BaseLayout.astro";
import Post from "../../components/Post.astro";

export async function getStaticPaths() {
  const entries = (await getCollection("research")).sort(
    (a, b) =>
      new Date(b.data.pubDate).valueOf() - new Date(a.data.pubDate).valueOf()
  );

  return entries.map((entry, index) => ({
    params: { slug: entry.slug },
    props: {
      entry,
      prevEntry: index < entries.length - 1 ? entries[index + 1] : null,
      nextEntry: index > 0 ? entries[index - 1] : null,
    },
  }));
}

interface ResearchEntryData {
  title: string;
  summary: string;
  journal: string;
  pubDate: string;
  tags?: string[];
  image?: string;
  imageAlt?: string;
  imageCaption?: string;
  paper: string;
  repo?: string;
  slides?: string;
  authors?: string[];
  tldr?: string[];
}

const { entry, prevEntry, nextEntry } = Astro.props;
const { Content } = await entry.render();
const data = entry.data as ResearchEntryData;
const base = import.meta.env.BASE_URL.endsWith("/")
  ? import.meta.env.BASE_URL
  : import.meta.env.BASE_URL + "/";

const meta = [{ label: "Journal", value: data.journal }];
if (data.authors && data.authors.length > 0) {
  meta.push({ label: "Authors", value: data.authors.join(", ") });
}

const links = [{ label: "Paper", href: data.paper, external: true }];
if (data.repo) links.push({ label: "Repo", href: data.repo, external: true });
if (data.slides)
  links.push({ label: "Slides", href: data.slides, external: true });

const tags = data.tags ?? [];
const tldr = data.tldr ?? [];
---

<BaseLayout title={data.title} description={data.summary} image={data.image}>
  <Post
    title={data.title}
    description={data.summary}
    variant="research"
    summary={data.summary}
    heroImage={data.image}
    heroImageAlt={data.imageAlt}
    heroImageCaption={data.imageCaption}
    pubDate={data.pubDate}
    tags={tags}
    meta={meta}
    tldr={tldr}
    links={links}
    Content={Content}
  />

  <div class="pagination">
    <div class="pagination__title">
      <span class="pagination__title-h">Explore other research</span>
      <hr />
    </div>
    <div class="pagination__buttons">
      {
        prevEntry && (
          <>
            <a
              href={`${base}research/${prevEntry.slug}/`}
              class="button inline prev"
            >
              &lt; [<span class="button__text">{prevEntry.data.title}</span>]
            </a>
            {prevEntry && nextEntry && <span>::</span>}
          </>
        )
      }
      {
        nextEntry && (
          <a
            href={`${base}research/${nextEntry.slug}/`}
            class="button inline next"
          >
            [<span class="button__text">{nextEntry.data.title}</span>] &gt;
          </a>
        )
      }
    </div>
  </div>
</BaseLayout>
