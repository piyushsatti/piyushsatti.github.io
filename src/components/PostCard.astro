---
import FormattedDate from "./FormattedDate.astro";
import { slugifyTag } from "../lib/tags";

/** BLOG */
interface BlogEntry {
  slug: string;
  data: {
    title: string;
    description?: string;
    pubDate: string;
    author?: string;
    tags?: string[];
    image?: string;
    externalLink?: string;
  };
}

/** PROJECTS */
interface ProjectEntry {
  slug: string;
  data: {
    title: string;
    summary: string;
    startDate: string;
    endDate?: string;
    tags?: string[];
    image?: string;
    repo?: string;
    demo?: string;
  };
}

/** RESEARCH */
interface ResearchEntry {
  slug: string;
  data: {
    title: string;
    journal: string;
    pubDate: string;
    summary: string;
    tags?: string[];
    image?: string;
    paper: string;
    repo?: string;
    slides?: string;
  };
}

type CardEntry = BlogEntry | ProjectEntry | ResearchEntry;

export interface Props {
  entry?: CardEntry;
  variant?: "blog" | "projects" | "research";
  post?: BlogEntry;
}

const base = import.meta.env.BASE_URL.endsWith("/")
  ? import.meta.env.BASE_URL
  : import.meta.env.BASE_URL + "/";

const incoming = (Astro.props.entry ?? Astro.props.post) as
  | CardEntry
  | undefined;
let variant = Astro.props.variant as Props["variant"] | undefined;

if (!incoming) {
  throw new Error("PostCard requires an entry or post prop");
}

if (!variant) {
  if ("journal" in incoming.data && "paper" in incoming.data) {
    variant = "research";
  } else if ("startDate" in incoming.data) {
    variant = "projects";
  } else {
    variant = "blog";
  }
}

const toDate = (value?: string) => (value ? new Date(value) : undefined);
const formatRangePart = (value?: Date) =>
  value
    ? value.toLocaleDateString(undefined, {
        year: "numeric",
        month: "short",
      })
    : undefined;

let url = "";
const title = incoming.data.title;
const tags = ((incoming as any).data.tags as string[] | undefined) ?? [];
const image = (incoming as any).data.image as string | undefined;

let primaryDate: Date | undefined;
let secondaryMeta: string | undefined;
let blurb: string | undefined;

if (variant === "blog") {
  const data = (incoming as BlogEntry).data;
  primaryDate = toDate(data.pubDate);
  secondaryMeta = data.author;
  blurb = data.description;
  url = data.externalLink || `${base}blog/${incoming.slug}/`;
} else if (variant === "projects") {
  const data = (incoming as ProjectEntry).data;
  const start = toDate(data.startDate);
  const end = toDate(data.endDate);
  primaryDate = end ?? start;
  const startLabel = formatRangePart(start);
  const endLabel = formatRangePart(end);
  secondaryMeta = endLabel
    ? `${startLabel ?? ""} → ${endLabel}`
    : `${startLabel ?? ""} → Present`;
  blurb = data.summary;
  url = `${base}projects/${incoming.slug}/`;
} else {
  const data = (incoming as ResearchEntry).data;
  primaryDate = toDate(data.pubDate);
  secondaryMeta = data.journal;
  blurb = data.summary;
  url = `${base}research/${incoming.slug}/`;
}

const isExternalPrimary =
  variant === "blog" &&
  "externalLink" in (incoming as any).data &&
  !!(incoming as any).data.externalLink;
---

<article class="post on-list">
  <h2 class="post-title">
    <a
      href={url}
      target={isExternalPrimary ? "_blank" : undefined}
      rel={isExternalPrimary ? "noopener" : undefined}
    >
      {title}
    </a>Pi
  </h2>

  <div class="post-meta">
    {
      primaryDate && (
        <time class="post-date">
          <FormattedDate date={primaryDate} />
        </time>
      )
    }
    {secondaryMeta && <span class="post-author">{secondaryMeta}</span>}
  </div>

  {
    tags.length > 0 && (
      <span class="post-tags">
        {tags.map((tag, index) => {
          const slug = slugifyTag(tag);
          const isLast = index === tags.length - 1;
          return (
            <span class="post-tag" data-tag={slug}>
              <a href={`${base}tags/${slug}/`}>{tag}</a>
              {!isLast && <span aria-hidden="true"> · </span>}
            </span>
          );
        })}
      </span>
    )
  }

  {
    image && (
      <figure class="post-cover">
        <img src={image} alt={title} />
      </figure>
    )
  }

  {
    blurb && (
      <div class="post-content">
        <p>{blurb}</p>
      </div>
    )
  }

  <div>
    <a
      href={url}
      class="read-more button inline"
      target={isExternalPrimary ? "_blank" : undefined}
      rel={isExternalPrimary ? "noopener" : undefined}
    >
      [Read more]
    </a>
  </div>
</article>
