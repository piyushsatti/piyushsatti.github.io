---
import ListingCard from "./cards/ListingCard.astro";

/** BLOG */
interface BlogEntry {
  slug: string;
  data: {
    title: string;
    description?: string;
    pubDate: string;
    author?: string;
    tags?: string[];
    image?: string;
    externalLink?: string;
  };
}

/** PROJECTS */
interface ProjectEntry {
  slug: string;
  data: {
    title: string;
    summary: string;
    startDate: string;
    endDate?: string;
    tags?: string[];
    image?: string;
    repo?: string;
    demo?: string;
  };
}

/** RESEARCH */
interface ResearchEntry {
  slug: string;
  data: {
    title: string;
    journal: string;
    pubDate: string;
    summary: string;
    tags?: string[];
    image?: string;
    paper: string;
    repo?: string;
    slides?: string;
  };
}

type CardEntry = BlogEntry | ProjectEntry | ResearchEntry;

type MetaItem = { kind: "date"; value: Date } | { kind: "text"; value: string };

export interface Props {
  entry?: CardEntry;
  variant?: "blog" | "projects" | "research";
  post?: BlogEntry;
}

const base = import.meta.env.BASE_URL.endsWith("/")
  ? import.meta.env.BASE_URL
  : import.meta.env.BASE_URL + "/";

const incoming = (Astro.props.entry ?? Astro.props.post) as
  | CardEntry
  | undefined;
let variant = Astro.props.variant as Props["variant"] | undefined;

if (!incoming) {
  throw new Error("PostCard requires an entry or post prop");
}

if (!variant) {
  if ("journal" in incoming.data && "paper" in incoming.data) {
    variant = "research";
  } else if ("startDate" in incoming.data) {
    variant = "projects";
  } else {
    variant = "blog";
  }
}

let url = "";
const title = incoming.data.title;
const tags = ((incoming as any).data.tags as string[] | undefined) ?? [];

let primaryDate: Date | undefined;
let secondaryMeta: string | undefined;
let blurb: string | undefined;
const actionLinks: Array<{ label: string; href: string; external?: boolean }> =
  [];

if (variant === "blog") {
  const data = (incoming as BlogEntry).data;
  primaryDate = new Date(data.pubDate);
  secondaryMeta = data.author;
  blurb = data.description;
  url = data.externalLink || `${base}blog/${incoming.slug}/`;
  if (data.externalLink) {
    actionLinks.push({
      label: "Original",
      href: data.externalLink,
      external: true,
    });
  }
} else if (variant === "projects") {
  const data = (incoming as ProjectEntry).data;
  primaryDate = data.endDate
    ? new Date(data.endDate)
    : new Date(data.startDate);
  secondaryMeta = data.endDate
    ? `${data.startDate} → ${data.endDate}`
    : `${data.startDate} → Present`;
  blurb = data.summary;
  url = `${base}projects/${incoming.slug}/`;
  if (data.repo)
    actionLinks.push({ label: "Repo", href: data.repo, external: true });
  if (data.demo)
    actionLinks.push({ label: "Demo", href: data.demo, external: true });
} else {
  const data = (incoming as ResearchEntry).data;
  primaryDate = new Date(data.pubDate);
  secondaryMeta = data.journal;
  blurb = data.summary;
  url = `${base}research/${incoming.slug}/`;
  if (data.paper)
    actionLinks.push({ label: "Paper", href: data.paper, external: true });
  if (data.repo)
    actionLinks.push({ label: "Repo", href: data.repo, external: true });
  if (data.slides)
    actionLinks.push({ label: "Slides", href: data.slides, external: true });
}

const isExternalPrimary =
  variant === "blog" &&
  "externalLink" in (incoming as any).data &&
  !!(incoming as any).data.externalLink;

const metaItems: MetaItem[] = [];

if (primaryDate) {
  metaItems.push({ kind: "date", value: primaryDate });
}

if (secondaryMeta) {
  metaItems.push({ kind: "text", value: secondaryMeta });
}

const ctaLabel = isExternalPrimary ? "Read original →" : undefined;
---

<ListingCard
  title={title}
  href={url}
  external={isExternalPrimary}
  summary={blurb}
  tags={tags}
  meta={metaItems}
  actions={actionLinks}
  ctaLabel={ctaLabel}
/>
