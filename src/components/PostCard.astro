---
import FormattedDate from "./FormattedDate.astro";

/** BLOG */
interface BlogEntry {
  slug: string;
  data: {
    title: string;
    description?: string;
    pubDate: string;
    author?: string;
    tags?: string[];
    image?: string;
    externalLink?: string;
  };
}

/** PROJECTS */
interface ProjectEntry {
  slug: string;
  data: {
    title: string;
    summary: string;          // from config.ts
    startDate: string;
    endDate?: string;
    tags?: string[];
    image?: string;
    repo?: string;
    demo?: string;
  };
}

/** RESEARCH */
interface ResearchEntry {
  slug: string;
  data: {
    title: string;
    journal: string;
    pubDate: string;
    summary: string;
    tags?: string[];
    image?: string;
    paper: string;            // DOI or paper URL
    repo?: string;
    slides?: string;
  };
}

type CardEntry = BlogEntry | ProjectEntry | ResearchEntry;

export interface Props {
  /** Preferred: pass the entry and which collection it came from */
  entry?: CardEntry;
  variant?: "blog" | "projects" | "research";

  /** Back-compat with old usage: <PostCard post={post} /> for blog */
  post?: BlogEntry;
}

const base = import.meta.env.BASE_URL.endsWith("/")
  ? import.meta.env.BASE_URL
  : import.meta.env.BASE_URL + "/"; // works with config.base on GitHub Pages. :contentReference[oaicite:1]{index=1}

/* normalize props (support old 'post' prop) */
const incoming = (Astro.props.entry ?? Astro.props.post) as CardEntry;
let variant = Astro.props.variant as Props["variant"] | undefined;

/* Infer variant if not provided */
if (!variant) {
  if ("journal" in incoming.data && "paper" in incoming.data) variant = "research";
  else if ("startDate" in incoming.data) variant = "projects";
  else variant = "blog";
}

/* Build URL and display fields */
let url = "";
let title = incoming.data.title;
let image: string | undefined = (incoming as any).data.image;
let tags: string[] | undefined = (incoming as any).data.tags;

/* common meta for display */
let primaryDate: Date | undefined;
let secondaryMeta: string | undefined;   // author, journal, or date range
let blurb: string | undefined;           // description/summary

if (variant === "blog") {
  const e = incoming as BlogEntry;
  primaryDate = new Date(e.data.pubDate);
  secondaryMeta = e.data.author;
  blurb = e.data.description;
  const external = e.data.externalLink;
  url = external || `${base}blog/${e.slug}/`; // route under /blog
} else if (variant === "projects") {
  const e = incoming as ProjectEntry;
  primaryDate = e.data.endDate ? new Date(e.data.endDate) : new Date(e.data.startDate); // show most recent
  const range = e.data.endDate
    ? `${e.data.startDate} → ${e.data.endDate}`
    : `${e.data.startDate} → Present`;
  secondaryMeta = range;
  blurb = e.data.summary;
  url = `${base}projects/${e.slug}/`;
} else {
  const e = incoming as ResearchEntry;
  primaryDate = new Date(e.data.pubDate);
  secondaryMeta = e.data.journal;
  blurb = e.data.summary;
  url = `${base}research/${e.slug}/`;
}
const isExternal = variant === "blog" && "externalLink" in (incoming as any).data && !!(incoming as any).data.externalLink;
---

<article class="post on-list">
  <h2 class="post-title">
    <a href={url} target={isExternal ? "_blank" : undefined} rel={isExternal ? "noopener" : undefined}>
      {title}
    </a>
  </h2>

  <div class="post-meta">
    {primaryDate && (
      <time class="post-date"><FormattedDate date={primaryDate} /></time>
    )}
    {secondaryMeta && <span class="post-author">{secondaryMeta}</span>}
  </div>

  {tags && tags.length > 0 && (
    <span class="post-tags">
      {tags.map((tag, i) => (
        <>
          <a href={`${base}tags/${tag}/`}>{tag}</a>{i < tags.length - 1 && ", "}
        </>
      ))}
    </span>
  )}

  {image && (
    <figure class="post-cover">
      <img src={image} alt={title} />
    </figure>
  )}

  {blurb && (
    <div class="post-content">
      <p>{blurb}</p>
    </div>
  )}

  <div>
    <a href={url} class="read-more button inline" target={isExternal ? "_blank" : undefined} rel={isExternal ? "noopener" : undefined}>
      [Read more]
    </a>
  </div>
</article>